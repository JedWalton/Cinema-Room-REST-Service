type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: test/cinema/MainTest.java
  visible: true
  text: |-
    package cinema;

    import static org.junit.jupiter.api.Assertions.*;

    class MainTest {

    }
  learner_created: false
- name: src/resources/static/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Main</title>
    </head>
    <body>
    <h1>Welcome!</h1>
    </body>
    </html>
  learner_created: true
- name: src/cinema/Controllers/BookingController.java
  visible: true
  text: |-
    package cinema.Controllers;

    import cinema.Models.Cinema;
    import cinema.Models.Seat;
    import cinema.Services.BookingService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class BookingController {

        private final BookingService bookingService;

        @Autowired
        public BookingController(BookingService bookingService) {
            this.bookingService = bookingService;
        }

        @GetMapping("/seats")
        public Cinema getAvailableSeatsInfo() {
            return bookingService.getAvailableSeatsInfo();
        }

        @PostMapping("/purchase")
        public ResponseEntity<String> purchaseTicket(@RequestBody Seat seat) {
            return bookingService.purchaseTicket(seat);
        }
    }
  learner_created: true
- name: src/cinema/Dictionary/ErrorMsgs.java
  visible: true
  text: |-
    package cinema.Dictionary;

    public enum ErrorMsgs {

        OUT_OF_BOUNDS("The number of a row or a column is out of bounds!"),
        NOT_AVAILABLE_TICKET("The ticket has been already purchased!");

        String error;

        ErrorMsgs(String error) {
            this.error = error;
        }

        @Override
        public String toString() {
            return this.error;
        }
    }
  learner_created: true
- name: src/cinema/Models/Cinema.java
  visible: true
  text: |-
    package cinema.Models;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.stereotype.Component;

    import java.util.Arrays;

    @Component
    public class Cinema {

        private final int totalRows = 9;
        private final int totalColumns = 9;
        private Seat[] seats = new Seat[totalColumns * totalColumns];

        public Cinema() {
            if (seats[0] == null) {
                createSeats();
            }
        }

        public int getTotalRows() {
            return totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        @JsonIgnore
        public Seat[] getSeats() {
            return seats.clone();
        }

        public void setSeats(Seat[] seats) {
            this.seats = seats;
        }

        public Seat[] getAvailableSeats() {
            return Arrays.stream(seats).filter(Seat::isAvailable).toArray(Seat[]::new);
        }

        private void createSeats() {
            int seatCounter = 0;
            for (int r = 1; r <= totalRows; r++) {
                for (int c = 1; c <= totalColumns; c++) {
                    seats[seatCounter] = new Seat(r, c, true);
                    seatCounter++;
                }
            }
        }
    }
  learner_created: true
- name: src/cinema/Services/BookingService.java
  visible: true
  text: |-
    package cinema.Services;

    import cinema.Dictionary.ErrorMsgs;
    import cinema.Models.Cinema;
    import cinema.Models.Seat;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;

    import java.util.Arrays;
    import java.util.Map;
    import java.util.Optional;

    @Service
    public class BookingService {

        @Autowired
        private Cinema cinema;

        public Cinema getAvailableSeatsInfo() {
            return cinema;
        }

        public ResponseEntity<String> purchaseTicket(Seat seat) {
            ResponseEntity response = getSeatAvailability(seat.getRow(), seat.getColumn());
            if (response.getStatusCode().is2xxSuccessful()) {
                changeSeatAvailability(seat, false);
            }
            return response;
        }

        private synchronized void changeSeatAvailability(Seat seat, boolean availability) {
            Arrays.stream(cinema.getAvailableSeats())
                    .filter(s -> s.equals(seat))
                    .forEach(s -> s.setFree(availability));
        }

        private ResponseEntity<String> getSeatAvailability(int row, int column) {
            ObjectMapper objectMapper = new ObjectMapper();
            ResponseEntity seatInfo;
            Optional<Seat> seatOpt = Arrays.stream(cinema.getSeats())
                    .filter(s -> s.getRow() == row && s.getColumn() == column)
                    .findFirst();

            if (seatOpt.isEmpty()) {
                seatInfo = new ResponseEntity(Map.of("error", ErrorMsgs.OUT_OF_BOUNDS.toString()), HttpStatus.BAD_REQUEST);
            } else if (!seatOpt.get().isAvailable()) {
                seatInfo = new ResponseEntity(Map.of("error", ErrorMsgs.NOT_AVAILABLE_TICKET.toString()), HttpStatus.BAD_REQUEST);
            } else {
                try {
                    seatInfo = new ResponseEntity(objectMapper.writeValueAsString(seatOpt.get()), HttpStatus.OK);
                } catch (JsonProcessingException e) {
                    seatInfo = new ResponseEntity(Map.of("error", e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            return seatInfo;
        }
    }
  learner_created: true
- name: src/cinema/Models/Seat.java
  visible: true
  text: |-
    package cinema.Models;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    public class Seat {
        private int row;
        private int column;
        private int price;
        private boolean isAvailable;

        public Seat(int row, int column, boolean isAvailable) {
            this.row = row;
            this.column = column;
            this.isAvailable = isAvailable;
            price = row <= 4 ? 10 : 8;
        }

        public Seat(@JsonProperty("row") int row, @JsonProperty("column") int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public int getPrice() {
            return price;
        }

        @JsonIgnore
        public boolean isAvailable() {
            return isAvailable;
        }

        public void setFree(boolean free) {
            isAvailable = free;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Seat seat = (Seat) o;

            if (getRow() != seat.getRow()) return false;
            return getColumn() == seat.getColumn();
        }

        @Override
        public int hashCode() {
            int result = getRow();
            result = 31 * result + getColumn();
            return result;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Unchecked
record: 3
